{"version":3,"sources":["R.style.js"],"names":["LineJoin","cc","Graphics","LineCap","Style","properties","_lineWidth","undefined","_strokeColor","_fillColor","_lineJoin","_lineCap","_miterLimit","_dashOffset","_dashArray","lineWidth","get","set","value","_dirty","lineJoin","MITER","type","lineCap","BUTT","strokeColor","Color","BLACK","fillColor","WHITE","miterLimit","dashOffset","dashArray","Array","isArray","getStyled","parent","getStyledColor","hexToColor","_applyStyle","ctx","module","exports"],"mappings":"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","file":"R.style.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\raphael\\component","sourcesContent":["\r\nvar LineJoin = cc.Graphics.LineJoin;\r\nvar LineCap = cc.Graphics.LineCap;\r\n\r\nvar Style = {\r\n    properties: {\r\n        _lineWidth: undefined,\r\n        _strokeColor: undefined,\r\n        _fillColor: undefined,\r\n        _lineJoin: undefined,\r\n        _lineCap: undefined,\r\n        _miterLimit: undefined,\r\n\r\n        _dashOffset: undefined,\r\n        _dashArray: undefined,\r\n\r\n        lineWidth: {\r\n            get: function () {\r\n                return this._lineWidth || 1;\r\n            },\r\n            set: function (value) {\r\n                this._lineWidth = value;\r\n                this._dirty = true;\r\n            }\r\n        },\r\n\r\n        lineJoin: {\r\n            get: function () {\r\n                return this._lineJoin || LineJoin.MITER;\r\n            },\r\n            set: function (value) {\r\n                this._lineJoin = value;\r\n                this._dirty = true;\r\n            },\r\n            type: LineJoin\r\n        },\r\n\r\n        lineCap: {\r\n            get: function () {\r\n                return this._lineCap || LineCap.BUTT;\r\n            },\r\n            set: function (value) {\r\n                this._lineCap = value;\r\n                this._dirty = true;\r\n            },\r\n            type: LineCap\r\n        },\r\n\r\n        strokeColor: {\r\n            get: function () {\r\n                return this._strokeColor || cc.Color.BLACK;\r\n            },\r\n            set: function (value) {\r\n                this._strokeColor = value;\r\n                this._dirty = true;\r\n            }\r\n        },\r\n\r\n        fillColor: {\r\n            get: function () {\r\n                return this._fillColor || cc.Color.WHITE;\r\n            },\r\n            set: function (value) {\r\n                this._fillColor = value;\r\n                this._dirty = true;\r\n            }\r\n        },\r\n\r\n        miterLimit: {\r\n            get: function () {\r\n                return this._miterLimit || 10;\r\n            },\r\n            set: function (value) {\r\n                this._miterLimit = value;\r\n                this._dirty = true;\r\n            }\r\n        },\r\n\r\n        dashOffset: {\r\n            get: function () {\r\n                return this._dashOffset || 0;\r\n            },\r\n            set: function (value) {\r\n                if (this._dashOffset === value) {\r\n                    return;\r\n                }\r\n                this._dashOffset = value;\r\n                this._dirty = true;\r\n            }\r\n        },\r\n        dashArray: {\r\n            get: function () {\r\n                return this._dashArray || [];\r\n            },\r\n            set: function (value) {\r\n                if (!Array.isArray(value)) {\r\n                    return;\r\n                }\r\n                this._dashArray = value;\r\n                this._dirty = true;\r\n            }\r\n        },\r\n    },\r\n\r\n    getStyled: function (type) {\r\n        var value = this['_' + type];\r\n        \r\n        if (value === 'inherit' || value === undefined) {\r\n            if (this.parent) value = this.parent.getStyled(type);\r\n            else value = this[type];\r\n        }\r\n\r\n        return value;\r\n    },\r\n\r\n    getStyledColor: function (type) {\r\n        var value = this.getStyled(type);\r\n\r\n        if (value === 'none' || !value) {\r\n            value = null;\r\n        }\r\n        else if (typeof value === 'string') {\r\n            value = cc.hexToColor(value);\r\n        }\r\n\r\n        return value;\r\n    },\r\n\r\n    _applyStyle: function () {\r\n        var ctx = this.ctx;\r\n        ctx.lineWidth = this.getStyled('lineWidth');\r\n        ctx.lineJoin = this.getStyled('lineJoin');\r\n        ctx.lineCap = this.getStyled('lineCap');\r\n\r\n        var strokeColor = this.getStyledColor('strokeColor');\r\n        var fillColor = this.getStyledColor('fillColor');\r\n\r\n        if (strokeColor)\r\n            ctx.strokeColor = strokeColor;\r\n        if (fillColor)\r\n            ctx.fillColor = fillColor;\r\n    }\r\n};\r\n\r\nmodule.exports = Style;\r\n"]}